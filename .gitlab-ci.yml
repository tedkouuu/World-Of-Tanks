stages:
  - build
  - test
  - security
  - notify
  - docker

# Rules for starting the pipeline
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always

    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

    - changes:
        - "src/**"
        - "pom.xml"
      when: always

    - changes:
        - "README.md"
        - "docs/**"
      when: never

    - when: never

variables:
  PROJECT_NAME: WoT

# Build stage
build-job:
  stage: build
  # Create a container from that image and run it on GitLab
  image: maven:3.9.9-eclipse-temurin-17
  only:
    - main
  script:
    - echo "Building the project..."
    - mvn install
  after_script:
    - ls -la
  artifacts:
    paths:
      - target/world-of-tanks.jar
    when: always

# Test stage
test-job:
  stage: test
  # Create a container from that image and run it on GitLab
  image: maven:3.9.9-eclipse-temurin-17
  needs: [ build-job ]
  only:
    - main
  script:
    - echo "Running unit test in the project..."
    - mvn test
    - mvn checkstyle:checkstyle

security-scan:
  stage: security
  image:
    name: aquasec/trivy:latest
    entrypoint: [ "" ]
  needs: [ build-job ]
  script:
    - trivy fs --format json --exit-code 1 --severity HIGH,CRITICAL --vuln-type os,library --output trivy-results.json
  after_script:
    - ls -la
  artifacts:
    paths:
      - trivy-results.json
    when: always

docker-build-publish:
  stage: docker
  image: docker:latest
  services:
    - docker:dind
  needs:
    - job: build-job
      artifacts: true
    - job: security-scan
  variables:
    DOCKER_TLS_CERTDIR: ""
    IMAGE_TAG: $CI_COMMIT_SHA
  script:
    - echo "Logging in to GitLab Container Registry..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - echo "Building Docker image with custom Dockerfile..."
    - docker build -f Dockerfile -t $CI_REGISTRY_IMAGE:$IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG

notify-on-failure:
  stage: notify
  script:
    - echo "Build or Test job failed for ${PROJECT_NAME}! Please check logs."
  when: on_failure